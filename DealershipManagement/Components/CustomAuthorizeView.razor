@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

@if (isAuthenticated)
{
    @ChildContent
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 col-lg-4">
                <div class="card shadow">
                    <div class="card-header bg-warning text-dark text-center">
                        <h4><i class="bi bi-shield-exclamation"></i> Access Denied</h4>
                    </div>
                    <div class="card-body text-center">
                        <p>You need to be logged in to access this page.</p>
                        <a href="/login" class="btn btn-primary">
                            <i class="bi bi-box-arrow-in-right"></i> Go to Login
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;
        
        // Also check for cookie-based authentication
        if (!isAuthenticated)
        {
            var cookieUser = await JSRuntime.InvokeAsync<string>("auth.getAuthCookie");
            isAuthenticated = !string.IsNullOrEmpty(cookieUser);
        }
    }
}
